import React, { useState, useEffect } from 'react';
import { X, FileText, Download, Calendar, Filter, BarChart3 } from 'lucide-react';
import Button from '../../ui/Button';
import ProgressBar from '../../ui/ProgressBar';
import './ReportGenerationModal.css';

const ReportGenerationModal = ({ isOpen, onClose, onGenerate }) => {
    const [step, setStep] = useState('setup'); // setup, generating, completed
    const [reportConfig, setReportConfig] = useState({
        type: 'security', // security, system, threat, comprehensive
        timeRange: '7d', // 1d, 7d, 30d, 90d, custom
        format: 'pdf', // pdf, excel, csv
        includeCharts: true,
        includeDetails: true,
        includeSummary: true,
        customStartDate: '',
        customEndDate: ''
    });
    const [progress, setProgress] = useState(0);
    const [currentTask, setCurrentTask] = useState('');
    const [generatedReport, setGeneratedReport] = useState(null);

    // Î≥¥Í≥†ÏÑú Ïú†ÌòïÎ≥Ñ ÏÑ§Ï†ï
    const reportTypes = {
        security: {
            name: 'Î≥¥Ïïà Î∂ÑÏÑù Î≥¥Í≥†ÏÑú',
            description: 'Î≥¥Ïïà ÏúÑÌòë, Ï∞®Îã® ÌòÑÌô©, Ï∑®ÏïΩÏ†ê Î∂ÑÏÑù',
            icon: 'üõ°Ô∏è',
            sections: ['ÏúÑÌòë ÌÉêÏßÄ ÌòÑÌô©', 'Ï∞®Îã® ÌÜµÍ≥Ñ', 'Î≥¥Ïïà Ï∑®ÏïΩÏ†ê', 'Í∂åÏû•ÏÇ¨Ìï≠']
        },
        system: {
            name: 'ÏãúÏä§ÌÖú ÏÑ±Îä• Î≥¥Í≥†ÏÑú',
            description: 'AWS ÏÑúÎπÑÏä§ ÏÉÅÌÉú, ÏÑ±Îä• ÏßÄÌëú, Î¶¨ÏÜåÏä§ ÏÇ¨Ïö©Îüâ',
            icon: '‚öôÔ∏è',
            sections: ['ÏÑúÎπÑÏä§ ÏÉÅÌÉú', 'ÏÑ±Îä• ÏßÄÌëú', 'Î¶¨ÏÜåÏä§ ÏÇ¨Ïö©Îüâ', 'ÏµúÏ†ÅÌôî Ï†úÏïà']
        },
        threat: {
            name: 'ÏúÑÌòë Î∂ÑÏÑù Î≥¥Í≥†ÏÑú',
            description: 'Ïã§ÏãúÍ∞Ñ ÏúÑÌòë ÌòÑÌô©, Í≥µÍ≤© Ìå®ÌÑ¥, ÎåÄÏùë ÌòÑÌô©',
            icon: 'üö®',
            sections: ['ÏúÑÌòë ÌòÑÌô©', 'Í≥µÍ≤© Ìå®ÌÑ¥', 'ÎåÄÏùë Í≤∞Í≥º', 'Ìä∏Î†åÎìú Î∂ÑÏÑù']
        },
        comprehensive: {
            name: 'Ï¢ÖÌï© Î≥¥Í≥†ÏÑú',
            description: 'Î≥¥Ïïà, ÏãúÏä§ÌÖú, ÏúÑÌòë Î∂ÑÏÑùÏùÑ Ìè¨Ìï®Ìïú Ï†ÑÏ≤¥ Î≥¥Í≥†ÏÑú',
            icon: 'üìã',
            sections: ['Ï†ÑÏ≤¥ ÏöîÏïΩ', 'Î≥¥Ïïà ÌòÑÌô©', 'ÏãúÏä§ÌÖú ÏÉÅÌÉú', 'ÏúÑÌòë Î∂ÑÏÑù', 'Ï¢ÖÌï© Í∂åÏû•ÏÇ¨Ìï≠']
        }
    };

    const timeRanges = {
        '1d': 'ÏµúÍ∑º 1Ïùº',
        '7d': 'ÏµúÍ∑º 7Ïùº',
        '30d': 'ÏµúÍ∑º 30Ïùº',
        '90d': 'ÏµúÍ∑º 90Ïùº',
        'custom': 'ÏÇ¨Ïö©Ïûê ÏßÄÏ†ï'
    };

    const formats = {
        pdf: { name: 'PDF', icon: 'üìÑ', description: 'ÏãúÍ∞ÅÏ†Å Î≥¥Í≥†ÏÑú, ÌîÑÎ†àÏ††ÌÖåÏù¥ÏÖòÏö©' },
        excel: { name: 'Excel', icon: 'üìä', description: 'Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù, Í∞ÄÍ≥µ Í∞ÄÎä•' },
        csv: { name: 'CSV', icon: 'üìà', description: 'ÏõêÏãú Îç∞Ïù¥ÌÑ∞, Ïô∏Î∂Ä ÎèÑÍµ¨ Ïó∞Îèô' }
    };

    // Î≥¥Í≥†ÏÑú ÏÉùÏÑ± ÏãúÏûë
    const startGeneration = async () => {
        setStep('generating');
        setProgress(0);

        const tasks = [
            { name: 'Îç∞Ïù¥ÌÑ∞ ÏàòÏßë Ï§ë', duration: 2000 },
            { name: 'ÌÜµÍ≥Ñ Î∂ÑÏÑù Ï§ë', duration: 2500 },
            { name: 'Ï∞®Ìä∏ ÏÉùÏÑ± Ï§ë', duration: 1800 },
            { name: 'Î≥¥Í≥†ÏÑú ÏûëÏÑ± Ï§ë', duration: 2200 },
            { name: 'ÌååÏùº ÏÉùÏÑ± Ï§ë', duration: 1500 }
        ];

        for (let i = 0; i < tasks.length; i++) {
            const task = tasks[i];
            setCurrentTask(task.name);

            await new Promise(resolve => {
                let taskProgress = 0;
                const interval = setInterval(() => {
                    taskProgress += 10;
                    const overallProgress = ((i * 100) + taskProgress) / tasks.length;
                    setProgress(overallProgress);

                    if (taskProgress >= 100) {
                        clearInterval(interval);
                        resolve();
                    }
                }, task.duration / 10);
            });
        }

        // ÏÉùÏÑ±Îêú Î≥¥Í≥†ÏÑú Ï†ïÎ≥¥
        const reportInfo = {
            id: Date.now().toString(),
            name: `${reportTypes[reportConfig.type].name}_${new Date().toISOString().split('T')[0]}`,
            type: reportConfig.type,
            format: reportConfig.format,
            size: Math.floor(Math.random() * 5000) + 1000, // KB
            createdAt: new Date().toISOString(),
            downloadUrl: '#', // Ïã§Ï†úÎ°úÎäî ÏÑúÎ≤ÑÏóêÏÑú ÏÉùÏÑ±Îêú URL
            pageCount: reportConfig.type === 'comprehensive' ? 25 : 15
        };

        setGeneratedReport(reportInfo);
        setStep('completed');
        setCurrentTask('ÏÉùÏÑ± ÏôÑÎ£å');
        onGenerate?.(reportInfo);
    };

    // ÏÑ§Ï†ï Î≥ÄÍ≤Ω Ìï∏Îì§Îü¨
    const handleConfigChange = (key, value) => {
        setReportConfig(prev => ({
            ...prev,
            [key]: value
        }));
    };

    // Îã§Ïö¥Î°úÎìú Ìï∏Îì§Îü¨
    const handleDownload = () => {
        // Ïã§Ï†ú ÌôòÍ≤ΩÏóêÏÑúÎäî ÌååÏùº Îã§Ïö¥Î°úÎìú Î°úÏßÅ
        console.log('Îã§Ïö¥Î°úÎìú:', generatedReport);
        
        // ÏãúÎÆ¨Î†àÏù¥ÏÖòÏö© ÏïåÎ¶º
        alert(`${generatedReport.name}.${generatedReport.format} ÌååÏùºÏù¥ Îã§Ïö¥Î°úÎìúÎê©ÎãàÎã§.`);
    };

    // Î™®Îã¨ Îã´Í∏∞
    const handleClose = () => {
        if (step === 'generating') {
            if (window.confirm('Î≥¥Í≥†ÏÑú ÏÉùÏÑ±Ïù¥ ÏßÑÌñâ Ï§ëÏûÖÎãàÎã§. Ï†ïÎßê Ï∑®ÏÜåÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
                setStep('setup');
                setProgress(0);
                onClose();
            }
        } else {
            setStep('setup');
            setProgress(0);
            onClose();
        }
    };

    // ÏÉà Î≥¥Í≥†ÏÑú ÏÉùÏÑ±
    const createNewReport = () => {
        setStep('setup');
        setProgress(0);
        setGeneratedReport(null);
        setCurrentTask('');
    };

    if (!isOpen) return null;

    return (
        <div className="report-generation-modal-overlay" onClick={handleClose}>
            <div className="report-generation-modal" onClick={e => e.stopPropagation()}>
                {/* Î™®Îã¨ Ìó§Îçî */}
                <div className="modal-header">
                    <div className="modal-title">
                        <FileText className="title-icon" />
                        <h2>Î≥¥Í≥†ÏÑú ÏÉùÏÑ±</h2>
                    </div>
                    <button className="modal-close-btn" onClick={handleClose}>
                        <X size={20} />
                    </button>
                </div>

                {/* Î™®Îã¨ ÏΩòÌÖêÏ∏† */}
                <div className="modal-content">
                    {step === 'setup' && (
                        <div className="report-setup">
                            {/* Î≥¥Í≥†ÏÑú Ïú†Ìòï ÏÑ†ÌÉù */}
                            <div className="config-section">
                                <h3>Î≥¥Í≥†ÏÑú Ïú†Ìòï</h3>
                                <div className="report-types">
                                    {Object.entries(reportTypes).map(([key, type]) => (
                                        <label 
                                            key={key} 
                                            className={`report-type-option ${reportConfig.type === key ? 'selected' : ''}`}
                                        >
                                            <input
                                                type="radio"
                                                value={key}
                                                checked={reportConfig.type === key}
                                                onChange={(e) => handleConfigChange('type', e.target.value)}
                                            />
                                            <div className="type-content">
                                                <div className="type-header">
                                                    <span className="type-icon">{type.icon}</span>
                                                    <strong>{type.name}</strong>
                                                </div>
                                                <p className="type-description">{type.description}</p>
                                                <div className="type-sections">
                                                    {type.sections.map((section, i) => (
                                                        <span key={i} className="section-tag">{section}</span>
                                                    ))}
                                                </div>
                                            </div>
                                        </label>
                                    ))}
                                </div>
                            </div>

                            {/* Í∏∞Í∞Ñ ÏÑ†ÌÉù */}
                            <div className="config-section">
                                <h3>Î∂ÑÏÑù Í∏∞Í∞Ñ</h3>
                                <div className="time-range-selector">
                                    {Object.entries(timeRanges).map(([key, label]) => (
                                        <button
                                            key={key}
                                            className={`time-range-btn ${reportConfig.timeRange === key ? 'selected' : ''}`}
                                            onClick={() => handleConfigChange('timeRange', key)}
                                        >
                                            <Calendar size={16} />
                                            {label}
                                        </button>
                                    ))}
                                </div>
                                
                                {reportConfig.timeRange === 'custom' && (
                                    <div className="custom-date-range">
                                        <div className="date-input">
                                            <label>ÏãúÏûëÏùº</label>
                                            <input
                                                type="date"
                                                value={reportConfig.customStartDate}
                                                onChange={(e) => handleConfigChange('customStartDate', e.target.value)}
                                            />
                                        </div>
                                        <div className="date-input">
                                            <label>Ï¢ÖÎ£åÏùº</label>
                                            <input
                                                type="date"
                                                value={reportConfig.customEndDate}
                                                onChange={(e) => handleConfigChange('customEndDate', e.target.value)}
                                            />
                                        </div>
                                    </div>
                                )}
                            </div>

                            {/* Ï∂úÎ†• ÌòïÏãù */}
                            <div className="config-section">
                                <h3>Ï∂úÎ†• ÌòïÏãù</h3>
                                <div className="format-selector">
                                    {Object.entries(formats).map(([key, format]) => (
                                        <label 
                                            key={key} 
                                            className={`format-option ${reportConfig.format === key ? 'selected' : ''}`}
                                        >
                                            <input
                                                type="radio"
                                                value={key}
                                                checked={reportConfig.format === key}
                                                onChange={(e) => handleConfigChange('format', e.target.value)}
                                            />
                                            <div className="format-content">
                                                <span className="format-icon">{format.icon}</span>
                                                <div className="format-info">
                                                    <strong>{format.name}</strong>
                                                    <span>{format.description}</span>
                                                </div>
                                            </div>
                                        </label>
                                    ))}
                                </div>
                            </div>

                            {/* Ìè¨Ìï® ÏòµÏÖò */}
                            <div className="config-section">
                                <h3>Ìè¨Ìï® ÏòµÏÖò</h3>
                                <div className="include-options">
                                    <label className="checkbox-option">
                                        <input
                                            type="checkbox"
                                            checked={reportConfig.includeSummary}
                                            onChange={(e) => handleConfigChange('includeSummary', e.target.checked)}
                                        />
                                        <span className="checkbox-label">
                                            <BarChart3 size={16} />
                                            ÏöîÏïΩ Ï†ïÎ≥¥ Ìè¨Ìï®
                                        </span>
                                    </label>
                                    
                                    <label className="checkbox-option">
                                        <input
                                            type="checkbox"
                                            checked={reportConfig.includeCharts}
                                            onChange={(e) => handleConfigChange('includeCharts', e.target.checked)}
                                        />
                                        <span className="checkbox-label">
                                            <BarChart3 size={16} />
                                            Ï∞®Ìä∏ Î∞è Í∑∏ÎûòÌîÑ Ìè¨Ìï®
                                        </span>
                                    </label>
                                    
                                    <label className="checkbox-option">
                                        <input
                                            type="checkbox"
                                            checked={reportConfig.includeDetails}
                                            onChange={(e) => handleConfigChange('includeDetails', e.target.checked)}
                                        />
                                        <span className="checkbox-label">
                                            <Filter size={16} />
                                            ÏÉÅÏÑ∏ Îç∞Ïù¥ÌÑ∞ Ìè¨Ìï®
                                        </span>
                                    </label>
                                </div>
                            </div>
                        </div>
                    )}

                    {step === 'generating' && (
                        <div className="report-generation">
                            <div className="generation-info">
                                <h3>Î≥¥Í≥†ÏÑú ÏÉùÏÑ± Ï§ë...</h3>
                                <p className="current-task">
                                    <span className="task-icon">üìÑ</span>
                                    {currentTask}
                                </p>
                            </div>

                            <ProgressBar 
                                value={progress}
                                variant="primary"
                                size="large"
                                animated={true}
                                striped={true}
                                showPercentage={true}
                                label="ÏÉùÏÑ± ÏßÑÌñâÎ•†"
                            />

                            <div className="generation-animation">
                                <div className="document-stack">
                                    <div className="document doc-1"></div>
                                    <div className="document doc-2"></div>
                                    <div className="document doc-3"></div>
                                    <div className="typing-indicator">
                                        <div className="typing-dot"></div>
                                        <div className="typing-dot"></div>
                                        <div className="typing-dot"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    )}

                    {step === 'completed' && (
                        <div className="report-completed">
                            <div className="completion-header">
                                <div className="success-icon">
                                    <FileText size={48} />
                                </div>
                                <h3>Î≥¥Í≥†ÏÑú ÏÉùÏÑ± ÏôÑÎ£å</h3>
                                <p>ÏöîÏ≤≠ÌïòÏã† Î≥¥Í≥†ÏÑúÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.</p>
                            </div>

                            <div className="report-info">
                                <div className="report-preview">
                                    <div className="preview-icon">{formats[generatedReport.format].icon}</div>
                                    <div className="report-details">
                                        <div className="report-name">{generatedReport.name}</div>
                                        <div className="report-meta">
                                            <span>ÌòïÏãù: {formats[generatedReport.format].name}</span>
                                            <span>ÌÅ¨Í∏∞: {(generatedReport.size / 1024).toFixed(1)} MB</span>
                                            <span>ÌéòÏù¥ÏßÄ: {generatedReport.pageCount}p</span>
                                        </div>
                                        <div className="creation-time">
                                            ÏÉùÏÑ±ÏùºÏãú: {new Date(generatedReport.createdAt).toLocaleString('ko-KR')}
                                        </div>
                                    </div>
                                </div>

                                <div className="report-actions">
                                    <Button 
                                        variant="primary" 
                                        icon={<Download size={16} />}
                                        onClick={handleDownload}
                                        size="large"
                                    >
                                        Îã§Ïö¥Î°úÎìú
                                    </Button>
                                </div>
                            </div>

                            <div className="report-summary">
                                <h4>Î≥¥Í≥†ÏÑú ÏöîÏïΩ</h4>
                                <div className="summary-grid">
                                    <div className="summary-item">
                                        <span className="summary-label">Î≥¥Í≥†ÏÑú Ïú†Ìòï:</span>
                                        <span className="summary-value">{reportTypes[reportConfig.type].name}</span>
                                    </div>
                                    <div className="summary-item">
                                        <span className="summary-label">Î∂ÑÏÑù Í∏∞Í∞Ñ:</span>
                                        <span className="summary-value">{timeRanges[reportConfig.timeRange]}</span>
                                    </div>
                                    <div className="summary-item">
                                        <span className="summary-label">Ìè¨Ìï® ÏÑπÏÖò:</span>
                                        <span className="summary-value">{reportTypes[reportConfig.type].sections.length}Í∞ú</span>
                                    </div>
                                    <div className="summary-item">
                                        <span className="summary-label">ÏÉùÏÑ± ÏòµÏÖò:</span>
                                        <span className="summary-value">
                                            {[
                                                reportConfig.includeSummary && 'ÏöîÏïΩ',
                                                reportConfig.includeCharts && 'Ï∞®Ìä∏',
                                                reportConfig.includeDetails && 'ÏÉÅÏÑ∏Ï†ïÎ≥¥'
                                            ].filter(Boolean).join(', ')}
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    )}
                </div>

                {/* Î™®Îã¨ Ìë∏ÌÑ∞ */}
                <div className="modal-footer">
                    {step === 'setup' && (
                        <>
                            <Button variant="secondary" onClick={handleClose}>
                                Ï∑®ÏÜå
                            </Button>
                            <Button variant="primary" onClick={startGeneration}>
                                Î≥¥Í≥†ÏÑú ÏÉùÏÑ±
                            </Button>
                        </>
                    )}

                    {step === 'generating' && (
                        <Button variant="danger" onClick={handleClose}>
                            ÏÉùÏÑ± Ï§ëÏßÄ
                        </Button>
                    )}

                    {step === 'completed' && (
                        <>
                            <Button variant="secondary" onClick={createNewReport}>
                                ÏÉà Î≥¥Í≥†ÏÑú
                            </Button>
                            <Button variant="primary" onClick={handleClose}>
                                ÌôïÏù∏
                            </Button>
                        </>
                    )}
                </div>
            </div>
        </div>
    );
};

export default ReportGenerationModal;