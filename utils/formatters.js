// üìÅ ÌååÏùº ÏúÑÏπò: src/utils/formatters.js

// ==========================================
// üé® Îç∞Ïù¥ÌÑ∞ Ìè¨Îß∑ÌåÖ Ìï®ÏàòÎì§
// ==========================================

// ÏúÑÌòë Í¥ÄÎ†® Ìè¨Îß∑ÌÑ∞
export const threatFormatters = {
    // ÏúÑÌòë Î†àÎ≤® ÎùºÎ≤® Ìè¨Îß∑ÌåÖ
    formatThreatLevel: (level) => {
        const levels = {
            low: { label: 'ÎÇÆÏùå', color: '#00ff41', icon: 'üü¢' },
            medium: { label: 'Î≥¥ÌÜµ', color: '#ffaa00', icon: 'üü°' },
            high: { label: 'ÎÜíÏùå', color: '#ff6600', icon: 'üü†' },
            critical: { label: 'ÏπòÎ™ÖÏ†Å', color: '#ff0040', icon: 'üî¥' }
        };
        return levels[level] || { label: 'Ïïå Ïàò ÏóÜÏùå', color: '#666666', icon: '‚ö™' };
    },

    // ÏúÑÌòë ÌÉÄÏûÖ Ìè¨Îß∑ÌåÖ
    formatThreatType: (type) => {
        const types = {
            'sql_injection': 'SQL Ïù∏Ï†ùÏÖò',
            'xss': 'XSS Í≥µÍ≤©',
            'brute_force': 'Î¨¥Ï∞®Î≥Ñ Í≥µÍ≤©',
            'malware': 'ÏïÖÏÑ±ÏΩîÎìú',
            'phishing': 'ÌîºÏã±',
            'dos': 'DOS Í≥µÍ≤©',
            'ddos': 'DDOS Í≥µÍ≤©',
            'port_scan': 'Ìè¨Ìä∏ Ïä§Ï∫î',
            'vulnerability_scan': 'Ï∑®ÏïΩÏ†ê Ïä§Ï∫î',
            'unauthorized_access': 'Î¨¥Îã® Ï†ëÍ∑º'
        };
        return types[type] || type;
    },

    // Í≥µÍ≤© ÏÜåÏä§ Ìè¨Îß∑ÌåÖ
    formatAttackSource: (source) => {
        const sources = {
            'external': 'Ïô∏Î∂Ä',
            'internal': 'ÎÇ¥Î∂Ä',
            'unknown': 'Ïïå Ïàò ÏóÜÏùå',
            'bot': 'Î¥á',
            'human': 'ÏÇ¨Îûå'
        };
        return sources[source] || source;
    },

    // Ï∞®Îã® ÏÉÅÌÉú Ìè¨Îß∑ÌåÖ
    formatBlockStatus: (status) => {
        const statuses = {
            'blocked': { label: 'Ï∞®Îã®Îê®', color: '#ff0040', icon: 'üö´' },
            'allowed': { label: 'ÌóàÏö©Îê®', color: '#00ff41', icon: '‚úÖ' },
            'monitoring': { label: 'Î™®ÎãàÌÑ∞ÎßÅ', color: '#ffaa00', icon: 'üëÅÔ∏è' },
            'quarantined': { label: 'Í≤©Î¶¨Îê®', color: '#ff6600', icon: 'üîí' }
        };
        return statuses[status] || { label: status, color: '#666666', icon: '‚ùì' };
    }
};

// ÏãúÏä§ÌÖú ÏÉÅÌÉú Ìè¨Îß∑ÌÑ∞
export const systemFormatters = {
    // ÏãúÏä§ÌÖú ÏÉÅÌÉú Ìè¨Îß∑ÌåÖ
    formatSystemStatus: (status) => {
        const statuses = {
            'online': { label: 'Ïò®ÎùºÏù∏', color: '#00ff41', icon: 'üü¢' },
            'offline': { label: 'Ïò§ÌîÑÎùºÏù∏', color: '#666666', icon: '‚ö´' },
            'warning': { label: 'Í≤ΩÍ≥†', color: '#ffaa00', icon: '‚ö†Ô∏è' },
            'error': { label: 'Ïò§Î•ò', color: '#ff0040', icon: '‚ùå' },
            'maintenance': { label: 'Ï†êÍ≤ÄÏ§ë', color: '#00ccff', icon: 'üîß' }
        };
        return statuses[status] || { label: 'Ïïå Ïàò ÏóÜÏùå', color: '#666666', icon: '‚ùì' };
    },

    // CPU ÏÇ¨Ïö©Î•† Ìè¨Îß∑ÌåÖ
    formatCpuUsage: (usage) => {
        const percentage = Math.round(usage);
        let level = 'normal';
        let color = '#00ff41';
        
        if (percentage > 80) {
            level = 'critical';
            color = '#ff0040';
        } else if (percentage > 60) {
            level = 'high';
            color = '#ff6600';
        } else if (percentage > 40) {
            level = 'medium';
            color = '#ffaa00';
        }
        
        return {
            percentage: `${percentage}%`,
            level,
            color,
            label: `CPU: ${percentage}%`
        };
    },

    // Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Î•† Ìè¨Îß∑ÌåÖ
    formatMemoryUsage: (used, total) => {
        const percentage = Math.round((used / total) * 100);
        const usedGB = (used / (1024 ** 3)).toFixed(1);
        const totalGB = (total / (1024 ** 3)).toFixed(1);
        
        let level = 'normal';
        let color = '#00ff41';
        
        if (percentage > 85) {
            level = 'critical';
            color = '#ff0040';
        } else if (percentage > 70) {
            level = 'high';
            color = '#ff6600';
        } else if (percentage > 50) {
            level = 'medium';
            color = '#ffaa00';
        }
        
        return {
            percentage: `${percentage}%`,
            used: `${usedGB}GB`,
            total: `${totalGB}GB`,
            level,
            color,
            label: `Î©îÎ™®Î¶¨: ${usedGB}GB / ${totalGB}GB (${percentage}%)`
        };
    },

    // ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÜçÎèÑ Ìè¨Îß∑ÌåÖ
    formatNetworkSpeed: (bytesPerSecond) => {
        const units = ['B/s', 'KB/s', 'MB/s', 'GB/s'];
        let value = bytesPerSecond;
        let unitIndex = 0;
        
        while (value >= 1024 && unitIndex < units.length - 1) {
            value /= 1024;
            unitIndex++;
        }
        
        return {
            value: value.toFixed(1),
            unit: units[unitIndex],
            label: `${value.toFixed(1)} ${units[unitIndex]}`,
            raw: bytesPerSecond
        };
    },

    // ÏóÖÌÉÄÏûÑ Ìè¨Îß∑ÌåÖ
    formatUptime: (seconds) => {
        const days = Math.floor(seconds / 86400);
        const hours = Math.floor((seconds % 86400) / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        
        if (days > 0) {
            return `${days}Ïùº ${hours}ÏãúÍ∞Ñ ${minutes}Î∂Ñ`;
        } else if (hours > 0) {
            return `${hours}ÏãúÍ∞Ñ ${minutes}Î∂Ñ`;
        } else {
            return `${minutes}Î∂Ñ`;
        }
    }
};

// AWS ÏÑúÎπÑÏä§ Ìè¨Îß∑ÌÑ∞
export const awsFormatters = {
    // Lambda Ìï®Ïàò ÏÉÅÌÉú Ìè¨Îß∑ÌåÖ
    formatLambdaStatus: (status) => {
        const statuses = {
            'Active': { label: 'ÌôúÏÑ±', color: '#00ff41', icon: '‚úÖ' },
            'Inactive': { label: 'ÎπÑÌôúÏÑ±', color: '#666666', icon: '‚ö´' },
            'Failed': { label: 'Ïã§Ìå®', color: '#ff0040', icon: '‚ùå' },
            'Pending': { label: 'ÎåÄÍ∏∞Ï§ë', color: '#ffaa00', icon: '‚è≥' }
        };
        return statuses[status] || { label: status, color: '#666666', icon: '‚ùì' };
    },

    // DynamoDB ÏÉÅÌÉú Ìè¨Îß∑ÌåÖ
    formatDynamoDBStatus: (status) => {
        const statuses = {
            'ACTIVE': { label: 'ÌôúÏÑ±', color: '#00ff41', icon: '‚úÖ' },
            'CREATING': { label: 'ÏÉùÏÑ±Ï§ë', color: '#ffaa00', icon: '‚è≥' },
            'UPDATING': { label: 'ÏóÖÎç∞Ïù¥Ìä∏Ï§ë', color: '#00ccff', icon: 'üîÑ' },
            'DELETING': { label: 'ÏÇ≠Ï†úÏ§ë', color: '#ff6600', icon: 'üóëÔ∏è' },
            'INACCESSIBLE_ENCRYPTION_CREDENTIALS': { label: 'ÏïîÌò∏Ìôî Ïò§Î•ò', color: '#ff0040', icon: 'üîí' }
        };
        return statuses[status] || { label: status, color: '#666666', icon: '‚ùì' };
    },

    // WAF Í∑úÏπô Í≤∞Í≥º Ìè¨Îß∑ÌåÖ
    formatWAFAction: (action) => {
        const actions = {
            'ALLOW': { label: 'ÌóàÏö©', color: '#00ff41', icon: '‚úÖ' },
            'BLOCK': { label: 'Ï∞®Îã®', color: '#ff0040', icon: 'üö´' },
            'COUNT': { label: 'Ïπ¥Ïö¥Ìä∏', color: '#00ccff', icon: 'üìä' },
            'CAPTCHA': { label: 'Ï∫°Ï∞®', color: '#ffaa00', icon: 'ü§ñ' }
        };
        return actions[action] || { label: action, color: '#666666', icon: '‚ùì' };
    },

    // GuardDuty ÏúÑÌòë Ïã¨Í∞ÅÎèÑ Ìè¨Îß∑ÌåÖ
    formatGuardDutySeverity: (severity) => {
        if (severity >= 8.5) {
            return { label: 'ÎÜíÏùå', color: '#ff0040', level: 'HIGH' };
        } else if (severity >= 4.0) {
            return { label: 'Î≥¥ÌÜµ', color: '#ffaa00', level: 'MEDIUM' };
        } else {
            return { label: 'ÎÇÆÏùå', color: '#00ff41', level: 'LOW' };
        }
    },

    // CloudWatch Î©îÌä∏Î¶≠ Îã®ÏúÑ Ìè¨Îß∑ÌåÖ
    formatCloudWatchUnit: (unit, value) => {
        const units = {
            'Seconds': { label: 'Ï¥à', formatter: (v) => `${v.toFixed(2)}Ï¥à` },
            'Microseconds': { label: 'ÎßàÏù¥ÌÅ¨Î°úÏ¥à', formatter: (v) => `${(v/1000).toFixed(2)}ms` },
            'Milliseconds': { label: 'Î∞ÄÎ¶¨Ï¥à', formatter: (v) => `${v.toFixed(2)}ms` },
            'Bytes': { label: 'bytes', formatter: (v) => formatBytes(v) },
            'Kilobytes': { label: 'KB', formatter: (v) => `${v.toFixed(2)}KB` },
            'Megabytes': { label: 'MB', formatter: (v) => `${v.toFixed(2)}MB` },
            'Gigabytes': { label: 'GB', formatter: (v) => `${v.toFixed(2)}GB` },
            'Terabytes': { label: 'TB', formatter: (v) => `${v.toFixed(2)}TB` },
            'Percent': { label: '%', formatter: (v) => `${v.toFixed(1)}%` },
            'Count': { label: 'Í∞ú', formatter: (v) => Math.round(v).toLocaleString() },
            'Count/Second': { label: 'Í∞ú/Ï¥à', formatter: (v) => `${v.toFixed(1)}/Ï¥à` }
        };
        
        const unitConfig = units[unit] || { label: unit, formatter: (v) => v.toString() };
        return unitConfig.formatter(value);
    }
};

// ÎÑ§Ìä∏ÏõåÌÅ¨ Í¥ÄÎ†® Ìè¨Îß∑ÌÑ∞
export const networkFormatters = {
    // IP Ï£ºÏÜå Ìè¨Îß∑ÌåÖ (ÎßàÏä§ÌÇπ)
    formatIPAddress: (ip, maskLevel = 0) => {
        if (maskLevel === 0) return ip;
        
        const parts = ip.split('.');
        switch (maskLevel) {
            case 1: // ÎßàÏßÄÎßâ Ïò•ÌÖü ÎßàÏä§ÌÇπ
                return `${parts[0]}.${parts[1]}.${parts[2]}.***`;
            case 2: // ÎßàÏßÄÎßâ Îëê Ïò•ÌÖü ÎßàÏä§ÌÇπ
                return `${parts[0]}.${parts[1]}.***.***.`;
            case 3: // Ï≤´ Î≤àÏß∏ Ïò•ÌÖüÎßå ÌëúÏãú
                return `${parts[0]}.***.***.***`;
            default:
                return ip;
        }
    },

    // Ìè¨Ìä∏ Î≤àÌò∏ ÏÑ§Î™Ö
    formatPortDescription: (port) => {
        const commonPorts = {
            20: 'FTP Îç∞Ïù¥ÌÑ∞',
            21: 'FTP Ï†úÏñ¥',
            22: 'SSH',
            23: 'Telnet',
            25: 'SMTP',
            53: 'DNS',
            80: 'HTTP',
            110: 'POP3',
            143: 'IMAP',
            443: 'HTTPS',
            993: 'IMAPS',
            995: 'POP3S',
            3389: 'RDP',
            5432: 'PostgreSQL',
            3306: 'MySQL',
            6379: 'Redis',
            27017: 'MongoDB'
        };
        
        const description = commonPorts[port];
        return description ? `${port} (${description})` : port.toString();
    },

    // ÌîÑÎ°úÌÜ†ÏΩú Ìè¨Îß∑ÌåÖ
    formatProtocol: (protocol) => {
        const protocols = {
            'tcp': 'TCP',
            'udp': 'UDP',
            'icmp': 'ICMP',
            'http': 'HTTP',
            'https': 'HTTPS',
            'ftp': 'FTP',
            'ssh': 'SSH',
            'smtp': 'SMTP'
        };
        return protocols[protocol.toLowerCase()] || protocol.toUpperCase();
    },

    // ÎåÄÏó≠Ìè≠ ÏÇ¨Ïö©Îüâ Ìè¨Îß∑ÌåÖ
    formatBandwidth: (bytes, timeFrame = 'second') => {
        const speed = formatBytes(bytes);
        const timeFrames = {
            'second': '/Ï¥à',
            'minute': '/Î∂Ñ',
            'hour': '/ÏãúÍ∞Ñ',
            'day': '/Ïùº'
        };
        return `${speed}${timeFrames[timeFrame] || ''}`;
    }
};

// Î≥¥Ïïà Í¥ÄÎ†® Ìè¨Îß∑ÌÑ∞
export const securityFormatters = {
    // Ï∑®ÏïΩÏ†ê Ï†êÏàò Ìè¨Îß∑ÌåÖ (CVSS)
    formatCVSSScore: (score) => {
        let severity = 'None';
        let color = '#666666';
        
        if (score === 0) {
            severity = 'ÏóÜÏùå';
            color = '#00ff41';
        } else if (score <= 3.9) {
            severity = 'ÎÇÆÏùå';
            color = '#00ff41';
        } else if (score <= 6.9) {
            severity = 'Î≥¥ÌÜµ';
            color = '#ffaa00';
        } else if (score <= 8.9) {
            severity = 'ÎÜíÏùå';
            color = '#ff6600';
        } else {
            severity = 'ÏπòÎ™ÖÏ†Å';
            color = '#ff0040';
        }
        
        return {
            score: score.toFixed(1),
            severity,
            color,
            label: `${score.toFixed(1)} (${severity})`
        };
    },

    // ÏïîÌò∏Ìôî Í∞ïÎèÑ Ìè¨Îß∑ÌåÖ
    formatEncryptionStrength: (bits) => {
        if (bits >= 256) {
            return { level: 'Îß§Ïö∞ Í∞ïÌï®', color: '#00ff41', bits: `${bits}bit` };
        } else if (bits >= 128) {
            return { level: 'Í∞ïÌï®', color: '#00ccff', bits: `${bits}bit` };
        } else if (bits >= 64) {
            return { level: 'Î≥¥ÌÜµ', color: '#ffaa00', bits: `${bits}bit` };
        } else {
            return { level: 'ÏïΩÌï®', color: '#ff0040', bits: `${bits}bit` };
        }
    },

    // Î°úÍ∑∏Ïù∏ ÏãúÎèÑ Í≤∞Í≥º Ìè¨Îß∑ÌåÖ
    formatLoginAttempt: (result) => {
        const results = {
            'success': { label: 'ÏÑ±Í≥µ', color: '#00ff41', icon: '‚úÖ' },
            'failed': { label: 'Ïã§Ìå®', color: '#ff0040', icon: '‚ùå' },
            'blocked': { label: 'Ï∞®Îã®Îê®', color: '#ff6600', icon: 'üö´' },
            'suspicious': { label: 'ÏùòÏã¨Ïä§Îü¨ÏõÄ', color: '#ffaa00', icon: '‚ö†Ô∏è' }
        };
        return results[result] || { label: result, color: '#666666', icon: '‚ùì' };
    }
};

// Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Ìè¨Îß∑ÌÑ∞
export const chartFormatters = {
    // ÏãúÍ≥ÑÏó¥ Îç∞Ïù¥ÌÑ∞ Ìè¨Îß∑ÌåÖ
    formatTimeSeriesData: (data, timeFormat = 'HH:mm') => {
        return data.map(item => ({
            ...item,
            time: new Date(item.timestamp).toLocaleTimeString('ko-KR', {
                hour: '2-digit',
                minute: '2-digit',
                ...(timeFormat.includes('ss') && { second: '2-digit' })
            })
        }));
    },

    // ÌååÏù¥ Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Ìè¨Îß∑ÌåÖ
    formatPieChartData: (data, totalLabel = 'Ï†ÑÏ≤¥') => {
        const total = data.reduce((sum, item) => sum + item.value, 0);
        
        return data.map(item => ({
            ...item,
            percentage: ((item.value / total) * 100).toFixed(1),
            label: `${item.name}: ${item.value} (${((item.value / total) * 100).toFixed(1)}%)`
        }));
    },

    // ÎßâÎåÄ Ï∞®Ìä∏ ÏÉâÏÉÅ ÏÉùÏÑ±
    generateChartColors: (count, palette = 'cyber') => {
        const palettes = {
            cyber: ['#00ccff', '#00ff41', '#ffaa00', '#ff6600', '#ff0040'],
            blue: ['#001f3f', '#0074D9', '#7FDBFF', '#39CCCC', '#3D9970'],
            warm: ['#FF4136', '#FF851B', '#FFDC00', '#2ECC40', '#0074D9']
        };
        
        const colors = palettes[palette] || palettes.cyber;
        const result = [];
        
        for (let i = 0; i < count; i++) {
            result.push(colors[i % colors.length]);
        }
        
        return result;
    }
};

// Ìó¨Ìçº Ìï®ÏàòÎì§
const formatBytes = (bytes, decimals = 2) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(decimals)) + ' ' + sizes[i];
};

// Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ Ìè¨Îß∑ÌÑ∞
export const validationFormatters = {
    // Ïò§Î•ò Î©îÏãúÏßÄ Ìè¨Îß∑ÌåÖ
    formatErrorMessage: (field, rule, value) => {
        const messages = {
            required: `${field}ÏùÄ(Îäî) ÌïÑÏàò ÏûÖÎ†• Ìï≠Î™©ÏûÖÎãàÎã§.`,
            email: 'Ïò¨Î∞îÎ•∏ Ïù¥Î©îÏùº Ï£ºÏÜåÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.',
            minLength: `${field}ÏùÄ(Îäî) ÏµúÏÜå ${rule.min}Ïûê Ïù¥ÏÉÅÏù¥Ïñ¥Ïïº Ìï©ÎãàÎã§.`,
            maxLength: `${field}ÏùÄ(Îäî) ÏµúÎåÄ ${rule.max}ÏûêÍπåÏßÄ ÏûÖÎ†• Í∞ÄÎä•Ìï©ÎãàÎã§.`,
            pattern: `${field}Ïùò ÌòïÏãùÏù¥ Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§.`,
            numeric: `${field}ÏùÄ(Îäî) Ïà´ÏûêÎßå ÏûÖÎ†• Í∞ÄÎä•Ìï©ÎãàÎã§.`,
            range: `${field}ÏùÄ(Îäî) ${rule.min}Í≥º ${rule.max} ÏÇ¨Ïù¥Ïùò Í∞íÏù¥Ïñ¥Ïïº Ìï©ÎãàÎã§.`
        };
        return messages[rule.type] || `${field} Í≤ÄÏ¶ùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.`;
    },

    // ÏÑ±Í≥µ Î©îÏãúÏßÄ Ìè¨Îß∑ÌåÖ
    formatSuccessMessage: (action) => {
        const messages = {
            save: 'Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.',
            update: 'ÏàòÏ†ïÎêòÏóàÏäµÎãàÎã§.',
            delete: 'ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.',
            create: 'ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.',
            send: 'Ï†ÑÏÜ°ÎêòÏóàÏäµÎãàÎã§.',
            login: 'Î°úÍ∑∏Ïù∏ÎêòÏóàÏäµÎãàÎã§.',
            logout: 'Î°úÍ∑∏ÏïÑÏõÉÎêòÏóàÏäµÎãàÎã§.'
        };
        return messages[action] || 'ÏûëÏóÖÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.';
    }
};

// Í≤ÄÏÉâ Í≤∞Í≥º Ìè¨Îß∑ÌÑ∞
export const searchFormatters = {
    // Í≤ÄÏÉâ Í≤∞Í≥º ÌïòÏù¥ÎùºÏù¥Ìä∏
    highlightSearchTerm: (text, searchTerm) => {
        if (!searchTerm) return text;
        const regex = new RegExp(`(${searchTerm})`, 'gi');
        return text.replace(regex, '<mark>$1</mark>');
    },

    // Í≤ÄÏÉâ ÌÜµÍ≥Ñ Ìè¨Îß∑ÌåÖ
    formatSearchStats: (total, page, pageSize, searchTime) => {
        const start = (page - 1) * pageSize + 1;
        const end = Math.min(page * pageSize, total);
        const timeMs = (searchTime * 1000).toFixed(0);
        
        return `Ï¥ù ${total.toLocaleString()}Í∞ú Í≤∞Í≥º Ï§ë ${start}-${end}Î≤àÏß∏ (${timeMs}ms)`;
    }
};